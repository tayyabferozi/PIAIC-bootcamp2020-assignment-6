{"version":3,"sources":["context/actionCreators.ts","components/Polygon.tsx","components/Question.tsx","context/Reducer.ts","context/GlobalState.tsx","components/Option.tsx","components/Options.tsx","components/Loader.tsx","constants/constants.ts","utils/shuffle-array.ts","components/QuestionContainer.tsx","App.tsx","index.tsx"],"names":["ActionType","Polygon","className","Question","qStatement","questionNo","dangerouslySetInnerHTML","__html","initialState","questions","score","currentQuestion","answers","reducer","state","action","type","SET_QUESTIONS","payload","SET_CURRENT_QUESTION","SET_CURRENT_ANSWER","currentQuestionNumber","newAnswers","newScore","answer","correct_answer","SET_SCORE","GlobalContext","createContext","dispatch","GlobalProvider","children","useReducer","Reducer","Provider","value","Option","statement","partNo","useState","classState","setClassState","useContext","optionClickHandler","chosenAnswer","questionNumber","useEffect","onClick","parts","Options","options","map","el","ix","React","memo","prevProps","nextProps","Loader","constants","api","shuffle","array","randomIndex","currentIndex","length","Math","floor","random","QuestionContainer","isLoading","setIsLoading","isStarted","setIsStarted","startQuizHandler","axios","get","then","res","setQuestions","data","results","catch","err","console","log","question","incorrect_answers","concat","no","style","fontSize","marginTop","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.16b3f132.chunk.js","sourcesContent":["export enum ActionType {\r\n  SET_QUESTIONS,\r\n  SET_CURRENT_QUESTION,\r\n  SET_CURRENT_ANSWER,\r\n  SET_SCORE,\r\n}\r\n\r\nexport interface Action {\r\n  type: ActionType;\r\n  payload: any;\r\n}\r\n\r\nexport interface MCQ {\r\n  question: string;\r\n  correct_answer: \"string\";\r\n  incorrect_answers: string[];\r\n}\r\n\r\nexport const setQuestions = (questions: MCQ[]): Action => {\r\n  return { type: ActionType.SET_QUESTIONS, payload: questions };\r\n};\r\n\r\nexport const setCurrentQuestion = (no: number): Action => {\r\n  return { type: ActionType.SET_CURRENT_QUESTION, payload: no };\r\n};\r\n\r\nexport const setCurrentAnswer = (\r\n  answer: string,\r\n  currentQuestionNumber: number\r\n): Action => {\r\n  return {\r\n    type: ActionType.SET_CURRENT_ANSWER,\r\n    payload: { answer, currentQuestionNumber },\r\n  };\r\n};\r\n\r\nexport const setScore = (score: number): Action => {\r\n  return { type: ActionType.SET_SCORE, payload: score };\r\n};\r\n","import React from \"react\";\r\n\r\nconst Polygon: React.FC = () => {\r\n  return (\r\n    <div className=\"Polygon\">\r\n      {/* <img src=\"img/logo-dark.png\" alt=\"Quiz\" /> */}\r\n      <h1>\r\n        Quiz <br />\r\n        App\r\n      </h1>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Polygon;\r\n","import React from \"react\";\r\n\r\nconst Question: React.FC<{ qStatement: string; questionNo: number }> = ({\r\n  qStatement,\r\n  questionNo,\r\n}) => {\r\n  return (\r\n    <div>\r\n      <div\r\n        className=\"Callout top-right\"\r\n        dangerouslySetInnerHTML={{\r\n          __html: `<div class='qNo'>${questionNo + 1} / 10</div> ${qStatement}`,\r\n        }}\r\n      ></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Question;\r\n","import { MCQ, Action, ActionType } from \"./actionCreators\";\r\n\r\nexport interface State {\r\n  questions: MCQ[] | [];\r\n  score: number;\r\n  currentQuestion: number;\r\n  answers: string[];\r\n}\r\n\r\nexport const initialState: State = {\r\n  questions: [],\r\n  score: 0,\r\n  currentQuestion: 0,\r\n  answers: [],\r\n};\r\n\r\nconst reducer = (state: State = initialState, action: Action): State => {\r\n  switch (action.type) {\r\n    case ActionType.SET_QUESTIONS:\r\n      return { ...state, ...initialState, questions: action.payload };\r\n    case ActionType.SET_CURRENT_QUESTION:\r\n      return { ...state, currentQuestion: action.payload };\r\n    case ActionType.SET_CURRENT_ANSWER:\r\n      const { currentQuestionNumber } = action.payload;\r\n      const newAnswers = [...state.answers];\r\n      let newScore = state.score;\r\n      if (newAnswers[currentQuestionNumber]) {\r\n        return state;\r\n      }\r\n      newAnswers[currentQuestionNumber] = action.payload.answer;\r\n      if (\r\n        newAnswers[currentQuestionNumber] ===\r\n        state.questions[currentQuestionNumber].correct_answer\r\n      ) {\r\n        newScore += 1;\r\n      }\r\n      return { ...state, answers: [...newAnswers], score: newScore };\r\n    case ActionType.SET_SCORE:\r\n      return { ...state, score: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","import React, { createContext, useReducer } from \"react\";\r\nimport Reducer, { initialState, State } from \"./Reducer\";\r\n\r\ninterface Context {\r\n  state: State;\r\n  dispatch: React.Dispatch<any>;\r\n}\r\n\r\nexport const GlobalContext = createContext<Context>({\r\n  state: initialState,\r\n  dispatch: () => undefined,\r\n});\r\n\r\ninterface Props {\r\n  children: React.ReactNode;\r\n}\r\n\r\nconst GlobalProvider: React.FC<Props> = ({ children }) => {\r\n  const [state, dispatch] = useReducer(Reducer, initialState);\r\n  return (\r\n    <GlobalContext.Provider value={{ state, dispatch }}>\r\n      {children}\r\n    </GlobalContext.Provider>\r\n  );\r\n};\r\n\r\nexport default GlobalProvider;\r\n","import React, { useContext, useState } from \"react\";\r\nimport { useEffect } from \"react\";\r\nimport { setCurrentAnswer } from \"../context/actionCreators\";\r\n\r\nimport { GlobalContext } from \"../context/GlobalState\";\r\n\r\ninterface Props {\r\n  statement: string;\r\n  partNo: string;\r\n}\r\n\r\nconst Option: React.FC<Props> = ({ statement, partNo }) => {\r\n  const [classState, setClassState] = useState<string>(\"\");\r\n\r\n  const {\r\n    state: { questions, currentQuestion, answers },\r\n    dispatch,\r\n  } = useContext(GlobalContext);\r\n\r\n  const optionClickHandler = (chosenAnswer: string, questionNumber: number) => {\r\n    dispatch(setCurrentAnswer(chosenAnswer, questionNumber));\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (answers[currentQuestion]) {\r\n      if (\r\n        answers[currentQuestion] === questions[currentQuestion].correct_answer\r\n      ) {\r\n        if (statement === answers[currentQuestion])\r\n          setClassState(\"Green Disabled\");\r\n        else setClassState(\"Disabled\");\r\n      } else if (statement === questions[currentQuestion].correct_answer) {\r\n        setClassState(\"Green Disabled\");\r\n      } else {\r\n        if (statement === answers[currentQuestion])\r\n          setClassState(\"Red Disabled\");\r\n        else setClassState(\"Disabled\");\r\n      }\r\n    }\r\n  }, [answers, currentQuestion, questions, statement]);\r\n\r\n  useEffect(() => {\r\n    setClassState(\"\");\r\n  }, [currentQuestion]);\r\n\r\n  return (\r\n    <div\r\n      className={`Option ${classState}`}\r\n      onClick={() => optionClickHandler(statement, currentQuestion)}\r\n    >\r\n      <div dangerouslySetInnerHTML={{ __html: statement }}></div>\r\n      <div className=\"PartNo\">{partNo}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Option;\r\n","import React from \"react\";\r\n\r\nimport Option from \"./Option\";\r\n\r\nconst parts = [\"A\", \"B\", \"C\", \"D\"];\r\n\r\nconst Options: React.FC<{ options: string[]; questionNo: number }> = ({\r\n  options,\r\n  questionNo,\r\n}) => {\r\n  return (\r\n    <div className=\"Options\">\r\n      {options.map((el, ix) => {\r\n        const partNo = parts[ix];\r\n        return <Option key={partNo} partNo={partNo} statement={el} />;\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(Options, (prevProps, nextProps) => {\r\n  if (prevProps.questionNo === nextProps.questionNo) {\r\n    return true;\r\n  } else {\r\n    return false;\r\n  }\r\n});\r\n","import React from \"react\";\r\n\r\nconst Loader: React.FC = () => {\r\n  return (\r\n    <div className=\"lds-spinner\">\r\n      <div></div>\r\n      <div></div>\r\n      <div></div>\r\n      <div></div>\r\n      <div></div>\r\n      <div></div>\r\n      <div></div>\r\n      <div></div>\r\n      <div></div>\r\n      <div></div>\r\n      <div></div>\r\n      <div></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Loader;\r\n","const constants = {\r\n  api: \"https://opentdb.com/api.php?amount=10&category=18&difficulty=easy&type=multiple\",\r\n};\r\n\r\nexport default constants;\r\n","const shuffle = (array: any[]): any[] => {\r\n  var currentIndex = array.length,\r\n    randomIndex;\r\n\r\n  // While there remain elements to shuffle...\r\n  while (0 !== currentIndex) {\r\n    // Pick a remaining element...\r\n    randomIndex = Math.floor(Math.random() * currentIndex);\r\n    currentIndex--;\r\n\r\n    // And swap it with the current element.\r\n    [array[currentIndex], array[randomIndex]] = [\r\n      array[randomIndex],\r\n      array[currentIndex],\r\n    ];\r\n  }\r\n\r\n  return array;\r\n};\r\n\r\nexport default shuffle;\r\n","import React, { useState, useContext } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nimport Question from \"./Question\";\r\nimport Options from \"./Options\";\r\nimport Loader from \"./Loader\";\r\nimport constants from \"../constants/constants\";\r\nimport { GlobalContext } from \"../context/GlobalState\";\r\nimport { setCurrentQuestion, setQuestions } from \"../context/actionCreators\";\r\nimport shuffle from \"../utils/shuffle-array\";\r\n\r\nconst QuestionContainer: React.FC = () => {\r\n  const [isLoading, setIsLoading] = useState<boolean>(false);\r\n  const [isStarted, setIsStarted] = useState<boolean>(false);\r\n\r\n  const {\r\n    state: { answers, questions, currentQuestion, score },\r\n    dispatch,\r\n  } = useContext(GlobalContext);\r\n\r\n  const startQuizHandler = () => {\r\n    setIsLoading(true);\r\n    axios\r\n      .get(constants.api)\r\n      .then((res) => {\r\n        setIsLoading(false);\r\n        setIsStarted(true);\r\n        dispatch(setQuestions(res.data.results));\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  const showNextHandler = () => {\r\n    dispatch(setCurrentQuestion(currentQuestion + 1));\r\n  };\r\n\r\n  return (\r\n    <div className=\"QuestionContainer\">\r\n      {isLoading ? (\r\n        <Loader />\r\n      ) : (\r\n        <>\r\n          {isStarted && questions.length > 0 ? (\r\n            <>\r\n              {currentQuestion < questions.length ? (\r\n                <>\r\n                  <Question\r\n                    qStatement={questions[currentQuestion].question}\r\n                    questionNo={currentQuestion}\r\n                  />\r\n\r\n                  <Options\r\n                    options={shuffle(\r\n                      questions[currentQuestion].incorrect_answers.concat(\r\n                        questions[currentQuestion].correct_answer\r\n                      )\r\n                    )}\r\n                    questionNo={currentQuestion}\r\n                  />\r\n                  <div className=\"BtnNextContainer\">\r\n                    {answers[currentQuestion] && (\r\n                      <button className=\"Btn Next\" onClick={showNextHandler}>\r\n                        Next <span className=\"Arrow\">→</span>\r\n                      </button>\r\n                    )}\r\n                  </div>\r\n                </>\r\n              ) : (\r\n                <div className=\"ScoreContainer\">\r\n                  <div className=\"Score\">Score: {score}</div>\r\n                  <div className=\"FeedBack\">\r\n                    {score <= 7 ? \"Work Hard Next Time 😊\" : \"Good Work 😀\"}\r\n                  </div>\r\n                  <button\r\n                    className=\"Btn StartQuiz\"\r\n                    style={{ fontSize: \"1.75rem\", marginTop: \"2rem\" }}\r\n                    onClick={startQuizHandler}\r\n                  >\r\n                    Start Again\r\n                  </button>\r\n                </div>\r\n              )}\r\n            </>\r\n          ) : (\r\n            <button className=\"Btn StartQuiz\" onClick={startQuizHandler}>\r\n              Start Quiz\r\n            </button>\r\n          )}\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default QuestionContainer;\r\n","import \"./App.css\";\n\nimport Polygon from \"./components/Polygon\";\nimport QuestionContainer from \"./components/QuestionContainer\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Polygon />\n      <QuestionContainer />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport GlobalProvider from \"./context/GlobalState\";\n\nReactDOM.render(\n  <GlobalProvider>\n    <App />\n  </GlobalProvider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}